---
- name: Instalar AWX
  hosts: awx
  become: true
  vars:
    # awx_operator_version: "2.19.1"
    awx_namespace: "awx"
    bastion_install_dir: /tmp/awx
    persistent_container_storage_dir: /srv/containers
  pre_tasks:
    - name: Instalar paquetes requeridos
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      loop:
        - epel-release
        - git
        - make
        - firewalld
        - podman
        - python3-pip

  tasks:
    - name: Verwijder namespace awx als delete_ns true is
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ awx_namespace }}"
      when: delete_ns | default(false) | bool

    - name: Iniciar y habilitar firewalld
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: true

    - name: Asegurar que firewalld use iptables en lugar de nftables
      ansible.builtin.lineinfile:
        path: /etc/firewalld/firewalld.conf
        regexp: "^FirewallBackend"
        line: "FirewallBackend=iptables"

    - name: Reiniciar firewalld
      ansible.builtin.service:
        name: firewalld
        state: restarted

    - name: Descargar el script de instalación de k3s
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        dest: /root/k3s_install.sh
        mode: '0755'

    - name: Instalar k3s
      ansible.builtin.command:
        cmd: /root/k3s_install.sh --write-kubeconfig-mode 644 --selinux --kubelet-arg "container-log-max-files=4" --kubelet-arg "container-log-max-size=50Mi"
        creates: /etc/rancher/k3s/k3s.yaml
      environment:
        INSTALL_K3S_BIN_DIR: /usr/bin

      #    - name: Permitir que k3s despliegue correctamente los servicios predeterminados, esperar 3m
      #      ansible.builtin.wait_for:
      #        timeout: 180

    - name: Instalar la biblioteca Python de Kubernetes
      ansible.builtin.pip:
        name: kubernetes
        state: present

    - name: Crear /root/.kube
      ansible.builtin.file:
        path: /root/.kube
        state: directory

    - name: Copiar Kubeconfig al directorio home
      ansible.builtin.command:
        cmd: cp /etc/rancher/k3s/k3s.yaml /root/.kube/config

    - name: Execute shell script to get new AWX helm
      ansible.builtin.shell: |
        "/usr/bin/helm version" 
      register: helm_installed
      ignore_errors: true
      changed_when: false
      become: true
    
    - block:
        - name: Download Helm command line tool
          ansible.builtin.uri:
            url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            return_content: true
          register: helm_installer
    
        - name: Install Helm
          ansible.builtin.command:
            cmd: bash
            stdin: "{{ helm_installer.content }}"
            creates: /usr/local/bin/helm
    
        - name: Copy helm binary to /usr/bin
          ansible.builtin.command: "cp /usr/local/bin/helm /usr/bin/helm"
          args:
            creates: /usr/bin/helm
      when: helm_installed.failed


    - name: Establecer la versión de AWX Operator si no está establecida
      block:
        - name: Obtener etiquetas del repositorio de AWX Operator
          ansible.builtin.uri:
            url: "https://api.github.com/repos/ansible/awx-operator/tags"
            return_content: yes
          register: awx_tags_response

        - name: Usar la versión más reciente de AWX Operator
          set_fact:
            awx_operator_version: >-
              {{
                awx_tags_response.json | map(attribute='name') | map('split', '.') |
                map('map', 'int') | sort(reverse=True) | map('join', '.') | first
              }}
      when: awx_operator_version is not defined

    - name: Create necessary directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ bastion_install_dir }}/awx/kustomize/base"
        - "{{ bastion_install_dir }}/awx/kustomize/overlays/prd"
        - "{{ persistent_container_storage_dir }}/awx/postgres-15/data/userdata"
        - "{{ persistent_container_storage_dir }}/awx/projects"

    - name: Set permissions for AWX postgres directory
      ansible.builtin.file:
        path: "{{ persistent_container_storage_dir }}/awx/postgres-15"
        mode: '0755'
        recurse: yes

    - name: Set ownership for AWX postgres userdata directory
      ansible.builtin.file:
        path: "{{ persistent_container_storage_dir }}/awx/postgres-15/data/userdata"
        owner: 26
        group: 26
        mode: '0700'
        recurse: yes

    - name: Set ownership for AWX project directory
      ansible.builtin.file:
        path: "{{ persistent_container_storage_dir }}/awx/projects"
        owner: 1000
        group: 0
        #group: 1000
        mode: '0755'
        recurse: yes

    - name: Clonar el repositorio de AWX Operator
      ansible.builtin.git:
        repo: 'https://github.com/ansible/awx-operator.git'
        dest: '/root/awx-operator'
        version: "tags/{{ awx_operator_version }}"
        force: yes

    - name: Crear el espacio de nombres de Kubernetes para AWX
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ awx_namespace }}"

    - name: Add shell script to get AWX helm templates of new version
      ansible.builtin.template:
        src: "templates/get_new_awx_templates.sh.j2"
        dest: "{{ bastion_install_dir }}/awx/get_new_awx_templates.sh"
        mode: '0755'

    - name: Run script
      ansible.builtin.shell: |
        "{{ bastion_install_dir }}/awx/get_new_awx_templates.sh"
      args:
        executable: /bin/bash
      become: true

    - name: Remove shell script after execution
      ansible.builtin.file:
        path: "{{ bastion_install_dir }}/awx/get_new_awx_templates.sh"
        state: absent

    - name: Find template files
      ansible.builtin.find:
        paths: "{{ bastion_install_dir }}/awx/kustomize/base/awx-operator/templates/"
        patterns: "*.yaml"
      register: template_files

    - name: Copy kustomization base files
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ bastion_install_dir }}/awx/kustomize/base/{{ item.dest }}"
      loop:
        - { src: "templates/kustomization/base/pvc.yaml.j2", dest: "pvc.yaml" }
        - { src: "templates/kustomization/base/pv.yaml.j2", dest: "pv.yaml" }
        - { src: "templates/kustomization/base/storageclass.yaml.j2", dest: "storageclass.yaml" }
        - { src: "templates/kustomization/base/awx.yaml.j2", dest: "awx.yaml" }
        - { src: "templates/kustomization/base/kustomization.yaml.j2", dest: "kustomization.yaml" }
        - { src: "templates/kustomization/base/namespace.yaml.j2", dest: "namespace.yaml" }

    - name: Restore SELinux context
      ansible.builtin.command: "restorecon -Rv -F {{ persistent_container_storage_dir }}/awx"

    - name: Add template files to kustomization.yaml
      ansible.builtin.template:
        src: "templates/kustomization/base/kustomization.yaml.j2"
        dest: "{{ bastion_install_dir }}/awx/kustomize/base/kustomization.yaml"
      when: template_files.matched > 0

    - name: Install AWX CRDs
      ansible.builtin.command:
        cmd: kubectl apply -f {{ item }}
      loop:
        - https://raw.githubusercontent.com/ansible/awx-operator/devel/config/crd/bases/awx.ansible.com_awxs.yaml
        - https://raw.githubusercontent.com/ansible/awx-operator/devel/config/crd/bases/awx.ansible.com_awxbackups.yaml
        - https://raw.githubusercontent.com/ansible/awx-operator/devel/config/crd/bases/awx.ansible.com_awxrestores.yaml
        - https://raw.githubusercontent.com/ansible/awx-operator/devel/config/crd/bases/awx.ansible.com_awxmeshingresses.yaml

    - name: Create awx namespace
      ansible.builtin.command:
        cmd: kubectl create ns awx
      register: create_ns_result
      failed_when: create_ns_result.rc != 0 and "already exists" not in create_ns_result.stderr
      changed_when: "'created' in create_ns_result.stdout"

    - name: deploy awx
      ansible.builtin.command:
        cmd: "kubectl apply -k {{ bastion_install_dir }}/awx/kustomize/base"

    - name: Wait for AWX instance to be ready
      ansible.builtin.shell: |
        until kubectl get pods -n "awx" -l app.kubernetes.io/name=awx-web -o jsonpath='{.items[*].status.phase}' | grep -q 'Running'; do
          echo "Waiting for AWX instance to be ready...";
          sleep 30;
        done
      register: awx_instance_ready
      retries: 75
      delay: 30
      until: awx_instance_ready is success

    - name: Obtener la contraseña de administrador de AWX
      ansible.builtin.shell: |
        kubectl get secret awx-admin-password -n "{{ awx_namespace }}" -o jsonpath="{.data.password}" | base64 -d
      register: awx_admin_password
      changed_when: false

    - name: Obtener el puerto NodePort del servicio de AWX
      ansible.builtin.shell: |
        kubectl get service awx-service -n "{{ awx_namespace }}" -o jsonpath="{.spec.ports[0].nodePort}"
      register: awx_service_port
      changed_when: false

    - name: Guardar los detalles de acceso a AWX en un archivo
      ansible.builtin.copy:
        dest: "/tmp/awx_access_details.txt"
        content: |
          Contraseña de administrador de AWX: {{ awx_admin_password.stdout }}
          URL de AWX: http://{{ ansible_default_ipv4.address }}:{{ awx_service_port.stdout }}
        mode: '0644'

    - name: Depurar el contenido que se guardará en el archivo
      debug:
        msg: |
          Contraseña de administrador de AWX: {{ awx_admin_password.stdout }}
          URL de AWX: http://{{ ansible_default_ipv4.address }}:{{ awx_service_port.stdout }}
          Credenciales guardadas en /tmp/awx_access_details.txt

